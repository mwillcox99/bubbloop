// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.block_hashtag_ = (function() {
  function block_hashtag_() {
    this.run = __bind(this.run, this);
    this.expand = __bind(this.expand, this);
    this.blacken_background = __bind(this.blacken_background, this);
    var css,
      _this = this;

    if (window.hashtag_counter != null) {
      window.hashtag_counter++;
    } else {
      window.hashtag_counter = 0;
    }
    this.counter = window.hashtag_counter;
    css = "[name=hashtag] {\n	font-size: 50px;\n}\n#hashtag_input" + this.counter + " {\n	position: absolute;\n	top: 55%;\n	width: 80%;\n	left: 6%;\n	text-align: center;\n	font-size: 12px;\n}\n\ninput[type='text'],\ninput[type='number'],\ntextarea {\n	font-size: 16px;\n}";
    $('<style type="text/css"></style>').html(css).appendTo("head");
    $("<div class=\"drag-wrap draggable filter\" name=\"hashtag\">\n	#\n	<input id=\"hashtag_input" + this.counter + "\" type=\"text\" value=\"\">\n</div>").appendTo(".drag-zone");
    interact("[name=hashtag]").on('tap', function(event) {
      event.preventDefault();
      $("#hashtag_input" + _this.counter).focus();
      return _this.expand();
    });
  }

  block_hashtag_.prototype.blacken_background = function() {
    var $blacken;

    $blacken = $("<div>", {
      id: 'blacken-input'
    }).css({
      zIndex: 500,
      backgroundColor: 'rgba(0,0,0,0.5)',
      width: '100%',
      height: '100%',
      position: 'absolute',
      left: 0,
      top: 0
    });
    $("body").prepend($blacken);
    return $blacken.bind('tap touchstart', function() {
      $("#popup-input").blur();
      $("#popup-input").remove();
      return $("#blacken-input").remove();
    });
  };

  block_hashtag_.prototype.expand = function() {
    var $popup_input, actual, actual_height, box_width, height, left, original_height, original_width, position, scale, scaled, str_length, value, width,
      _this = this;

    this.blacken_background();
    height = document.documentElement.clientHeight;
    width = document.documentElement.clientWidth;
    box_width = width / 2;
    left = width / 2 - box_width / 2;
    value = $("#hashtag_input" + this.counter).val();
    $popup_input = $("<input id='popup-input' type='text'>");
    $popup_input.val(value);
    $popup_input.appendTo($("body"));
    str_length = $popup_input.val().length * 2;
    $popup_input.focus();
    $popup_input[0].setSelectionRange(str_length, str_length);
    position = $("#hashtag_input" + this.counter).offset();
    actual = $("#hashtag_input" + this.counter)[0].getBoundingClientRect().width;
    actual_height = $("#hashtag_input" + this.counter)[0].getBoundingClientRect().height;
    scaled = $("#hashtag_input" + this.counter)[0].offsetWidth;
    scale = actual / scaled;
    original_width = $("#hashtag_input" + this.counter).innerWidth();
    original_height = $("#hashtag_input" + this.counter).innerHeight();
    $("#popup-input").css({
      zIndex: 600,
      position: "fixed",
      left: position.left,
      top: position.top,
      fontSize: 16,
      textAlign: center,
      width: original_width * scale + 1,
      height: actual_height
    });
    $popup_input.velocity({
      width: box_width,
      height: original_height,
      top: height / 2,
      left: left
    });
    $("#popup-input").on('keyup', function(event) {
      var new_value;

      if (event.which === 13) {
        $("#popup-input").blur();
        $("#popup-input").remove();
        return $("#blacken-input").remove();
      } else {
        new_value = $("#popup-input").val();
        return $("#hashtag_input" + _this.counter).val(new_value);
      }
    });
    return $("#popup-input").blur(function() {
      $("#popup-input").remove();
      return $("#blacken-input").remove();
    });
  };

  block_hashtag_.prototype.run = function(element) {
    var cur_tag, lower_tags, tag, tags, _i, _len;

    tags = element.tags;
    tag = $("#hashtag_input" + this.counter).val().toLowerCase();
    lower_tags = tags.map(function(string) {
      return string.toLowerCase();
    });
    for (_i = 0, _len = lower_tags.length; _i < _len; _i++) {
      cur_tag = lower_tags[_i];
      if (cur_tag.indexOf(tag) !== -1) {
        return true;
      }
    }
    return false;
  };

  return block_hashtag_;

})();
