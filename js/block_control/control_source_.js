// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.control_source_ = (function() {
  function control_source_($target) {
    this.run = __bind(this.run, this);
    var append_to_this, css,
      _this = this;

    this.counter_id = window.counter;
    window.counter = this.counter_id + 1;
    css = ".droppable-" + this.counter_id + " {\n	opacity: 0.5;\n	position: absolute;\n	top: 50px;\n	left: 100px;\n}";
    $("<style type='text/css'></style>").html(css).appendTo("head");
    append_to_this = null;
    if ($target != null) {
      append_to_this = $target;
    } else {
      append_to_this = '.drop-zone';
    }
    $("<div id='if-text' class='text'>STEP 1</div>\n<div id='source-drop-zone' class='droppable steps droppable-" + this.counter_id + "' role='condition'>DROP CELEB HERE</div>").appendTo(append_to_this);
    this.spot_filled = [false, false];
    interact(".droppable-" + this.counter_id).dropzone({
      accept: '.draggable',
      overlap: .1,
      ondropactivate: function(event) {
        return $target = $(event.target);
      },
      ondragenter: function(event) {
        var $draggableElement, dropCenter, dropRect, dropzoneElement;

        $draggableElement = $(event.relatedTarget);
        dropzoneElement = event.target;
        dropRect = interact.getElementRect(dropzoneElement);
        dropCenter = {
          x: dropRect.left + dropRect.width / 2,
          y: dropRect.top + dropRect.height / 2
        };
        event.draggable.draggable({
          snap: {
            targets: [dropCenter]
          }
        });
        dropzoneElement.classList.add('can--catch');
        return $draggableElement.addClass('drop--me');
      },
      ondragleave: function(event) {
        var $relatedTarget;

        $target = $(event.target);
        $relatedTarget = $(event.relatedTarget);
        $target.removeClass('can--catch');
        $relatedTarget.removeClass('caught--it');
        return $relatedTarget.removeClass('drop--me');
      },
      ondrop: function(event) {
        var $clone, $related_target, block_name, x, y;

        $target = $(event.target);
        $related_target = $(event.relatedTarget);
        if ($target.attr('role') === 'condition') {
          block_name = $related_target.attr("name");
          _this.condition = window["block_" + block_name];
        }
        if ($target.attr('role') === 'action') {
          block_name = $related_target.attr("name");
          if (block_name === "ifthen") {
            _this.transform_action_area($target, $related_target, false);
          } else if (block_name === "forloop") {
            _this.transform_action_area($target, $related_target, true);
          } else {
            _this.action = window["block_" + block_name];
          }
        }
        $target.attr("filled", "true");
        $target.addClass('caught--it');
        if ($related_target.hasClass('drag-wrap')) {
          $clone = $related_target.clone();
          $clone.removeClass('drag-wrap');
          $clone.addClass('drop-wrap');
          $clone.removeClass('getting--dragged');
          $clone.appendTo('.drop-zone');
          x = $target.position().left + 5;
          y = $target.position().top;
          $clone.css({
            '-webkit-transform': "translate(" + x + "px, " + y + "px)",
            'position': 'absolute'
          });
          $clone.attr('data-x', x);
          $clone.attr('data-y', y);
          return $related_target.remove();
        }
      },
      ondropdeactivate: function(event) {
        $target = $(event.target);
        return $target.removeClass('can--drop', 'can--catch');
      }
    });
  }

  control_source_.prototype.transform_action_area = function($target, $block, isLoop) {
    var control_condition;

    $block.remove();
    $target.html(" ");
    $target.removeClass();
    $target.css({
      "width": "auto",
      "height": "auto"
    });
    $target.attr({
      "role": "whatever"
    });
    control_condition = null;
    if (isLoop) {
      control_condition = new control_for_loop_($target);
      new draggable_control_for_loop_();
    } else {
      control_condition = new control_if_then_($target);
      new draggable_control_if_then_();
    }
    return this.action = control_condition;
  };

  control_source_.prototype.run = function(outer_cb, element) {
    var _this = this;

    return this.condition.run(function(true_or_false) {
      if (true_or_false) {
        return _this.action.run(outer_cb, element);
      } else {
        if (outer_cb != null) {
          return outer_cb();
        }
      }
    });
  };

  return control_source_;

})();
